# django modules
from django.views.generic import View
# models
from rounds.models.assessments import Assessment
# helpers
from users.auth.mixins import JudgeRequiredMixin
from portal.functions import hashid_decode

class AssessmentUpdateView(JudgeRequiredMixin, View):
	template_name = "rounds/judge.html"

	def get(self, request, encoded):
		context = dict()
		# decoded = hashid_decode(encoded)
		decoded = encoded
		if decoded:
			current_ass = Assessment.objects.get(pk=decoded)
			submissions = Submission.objects.all().filter(
				asc_team=request.user.delegate.team).filter(
				asc_round_file__asc_round=current_round).order_by('latest'
				).order_by('-submitted_at')
			accepted_files = AcceptedRoundFile.objects.all().filter(
				asc_round=current_round)
			context["encoded_url"] = encoded
			
			if current_round.visible:
				context["round"] = current_round
				context["submissions"] = submissions
				if current_round.active and accepted_files:
					context["form"] = RoundUploadForm(instance=current_round,
						team=request.user.delegate.team)
		return render(request, self.template_name, context)

	def post(self, request, encoded):
		pass