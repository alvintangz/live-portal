# Generated by Django 2.1.2 on 2018-12-04 20:38

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import users.helpers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_delegate', models.BooleanField(default=False, verbose_name='delegate status')),
                ('is_partner', models.BooleanField(default=False, verbose_name='partner status')),
                ('first_name', models.CharField(max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(max_length=30, verbose_name='last name')),
                ('email', models.EmailField(max_length=254, verbose_name='email address')),
                ('activated', models.BooleanField(default=False, verbose_name='activated account')),
                ('agreed_terms', models.DateTimeField(blank=True, null=True, verbose_name='agreed to all terms on')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Delegate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_picture', models.ImageField(blank=True, upload_to=users.helpers.profile_picture_upload_to, verbose_name='profile picture')),
                ('year_of_study', models.CharField(choices=[('First Year Undergraduate', 'First year undergraduate'), ('Second Year Undergraduate', 'Second year undergraduate'), ('Third Year Undergraduate', 'Third year undergraduate'), ('Fourth Year Undergraduate', 'Fourth year undergraduate'), ('Fifth Year Undergraduate', 'Fifth year undergraduate'), ('Sixth Year Undergraduate', 'Sixth year undergraduate')], max_length=40, verbose_name='year in school')),
                ('school', models.CharField(choices=[('University of Toronto St. George', 'University of Toronto St. George'), ('University of Toronto Scarborough', 'University of Toronto Scarborough'), ('University of Toronto Mississauga', 'University of Toronto Mississauga'), ('Ryerson University', 'Ryerson University'), ('York University', 'York University'), ('University of Western Ontario', 'University of Western Ontario'), ("Queen's University", "Queen's University"), ('Wilfrid Laurier University', 'Wilfrid Laurier University'), ('University of Waterloo', 'University of Waterloo'), ('McMaster University', 'McMaster University'), ('Brock University', 'Brock University'), ('University of Ottawa', 'University of Ottawa'), ('McGill University', 'McGill University'), ('University of British Columbia', 'University of British Columbia'), ('University of Guelph', 'University of Guelph'), ('Carleton University', 'Carleton University'), ('University of Ontario Institute of Technology', 'University of Ontario Institute of Technology'), ('Trent University', 'Trent University'), ('Acadia University', 'Acadia University'), ('University of Alberta', 'University of Alberta'), ('Algoma University', 'Algoma University'), ('Athabasca University', 'Athabasca University'), ("Bishop's University", "Bishop's University"), ('Brandon University', 'Brandon University'), ('University of Calgary', 'University of Calgary'), ('Cape Breton University', 'Cape Breton University'), ('Capilano University', 'Capilano University'), ('Concordia University', 'Concordia University'), ('Dalhousie University', 'Dalhousie University'), ('Dominican University College', 'Dominican University College'), ('École de technologie supérieure', 'École de technologie supérieure'), ("École nationale d'administration publique", "École nationale d'administration publique"), ('École Polytechnique de Montréal', 'École Polytechnique de Montréal'), ('Emily Carr University of Art and Design', 'Emily Carr University of Art and Design'), ('First Nations University of Canada', 'First Nations University of Canada'), ('University of the Fraser Valley', 'University of the Fraser Valley'), ('HEC Montréal', 'HEC Montréal'), ('Huron University College', 'Huron University College'), ('Institut national de la recherche scientifique', 'Institut national de la recherche scientifique'), ("University of King's College", "University of King's College"), ('Kwantlen Polytechnic University', 'Kwantlen Polytechnic University'), ('Lakehead University', 'Lakehead University'), ('Laurentian University', 'Laurentian University'), ('University of Lethbridge', 'University of Lethbridge'), ('MacEwan University', 'MacEwan University'), ('University of Manitoba', 'University of Manitoba'), ('Memorial University of Newfoundland', 'Memorial University of Newfoundland'), ('Mount Allison University', 'Mount Allison University'), ('Mount Royal University', 'Mount Royal University'), ('Mount Saint Vincent University', 'Mount Saint Vincent University'), ('Nipissing University', 'Nipissing University'), ('University of Northern British Columbia', 'University of Northern British Columbia'), ('NSCAD University', 'NSCAD University'), ('OCAD University', 'OCAD University'), ('Royal Military College of Canada', 'Royal Military College of Canada'), ('Royal Roads University', 'Royal Roads University'), ('Saint Francis Xavier University', 'Saint Francis Xavier University'), ("Saint Mary's University", "Saint Mary's University"), ('Saint Paul University', 'Saint Paul University'), ('Université Sainte-Anne', 'Université Sainte-Anne'), ('Simon Fraser University', 'Simon Fraser University'), ('St. Thomas University', 'St. Thomas University'), ('Thompson Rivers University', 'Thompson Rivers University'), ('University College of the North', 'University College of the North'), ('University of New Brunswick', 'University of New Brunswick'), ('University of Prince Edward Island', 'University of Prince Edward Island'), ('University of Regina', 'University of Regina'), ('University of Saskatchewan', 'University of Saskatchewan'), ('Université de Moncton', 'Université de Moncton'), ('Université de Montréal', 'Université de Montréal'), ('Université de Sherbrooke', 'Université de Sherbrooke'), ('Université du Québec en Abitibi-Témiscamingue', 'Université du Québec en Abitibi-Témiscamingue'), ('Université du Québec en Outaouais', 'Université du Québec en Outaouais'), ('Université du Québec à Chicoutimi', 'Université du Québec à Chicoutimi'), ('Université du Québec à Montréal', 'Université du Québec à Montréal'), ('Université du Québec à Rimouski', 'Université du Québec à Rimouski'), ('Université du Québec à Trois-Rivières', 'Université du Québec à Trois-Rivières'), ('Université Laval', 'Université Laval'), ('Vancouver Island University', 'Vancouver Island University'), ('University of Victoria', 'University of Victoria'), ('University of Windsor', 'University of Windsor'), ('University of Winnipeg', 'University of Winnipeg'), ('Université de Saint-Boniface', 'Université de Saint-Boniface')], help_text='If the school is not listed, please contact the admin', max_length=150, verbose_name='currently attending')),
                ('program', models.CharField(max_length=150, verbose_name='program')),
                ('linkedin', models.URLField(blank=True, max_length=100, verbose_name='link to linkedin profile')),
                ('resume', models.FileField(upload_to=users.helpers.resume_upload_to, verbose_name='resume')),
                ('phone_number', models.CharField(blank=True, max_length=10, verbose_name='phone number')),
                ('seeking_status', models.CharField(choices=[('Co-op', 'Seeking for co-op'), ('Internship', 'Seeking for an internship'), ('Post-graduation', 'Seeking for post-graduation'), ('Not seeking', 'Not seeking')], max_length=80, verbose_name='seeking status')),
                ('is_invisible', models.BooleanField(default=False, help_text='Set this as True if you want to make this delegate invisible to partners. This option is used for testing purposes.', verbose_name='invisible to partners')),
            ],
        ),
        migrations.CreateModel(
            name='Partner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(max_length=130, verbose_name='company name')),
                ('partner_package', models.CharField(choices=[('Title', 'Title'), ('Gold', 'Gold'), ('Silver', 'Silver'), ('Bronze', 'Bronze'), ('Final day', 'Final day'), ('Associate', 'Associate'), ('Prize', 'Prize'), ('Custom', 'Custom')], max_length=60, verbose_name='package')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='partner', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(unique=True, verbose_name='team number')),
            ],
        ),
        migrations.AddField(
            model_name='delegate',
            name='team',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.Team'),
        ),
        migrations.AddField(
            model_name='delegate',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='delegate', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='DelegateUser',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('users.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='OtherUser',
            fields=[
            ],
            options={
                'verbose_name': 'other user',
                'verbose_name_plural': 'other users',
                'proxy': True,
                'indexes': [],
            },
            bases=('users.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='PartnerUser',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('users.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
